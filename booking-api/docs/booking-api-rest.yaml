openapi: 3.0.3
info:
  title: Booking API v1.0
  description: REST API for a booking system
  version: 1.0.0
servers:
  - url: http://localhost:8000/api
    description: Local server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "Token"
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
    Service:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    Booking:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          description: Automatically assigned from authenticated user
          example: 1
        service_id:
          type: integer
          description: Set on creation, immutable afterwards
          example: 2
        start_time:
          type: string
          format: date-time
          example: "2025-10-25T10:00:00Z"
        end_time:
          type: string
          format: date-time
          example: "2025-10-25T11:00:00Z"
        status:
          type: string
          enum: [pending, confirmed, completed, cancelled]
          example: "pending"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
paths:
  /v1/test-token:
    get:
      summary: Generate a demo token automatically
      responses:
        '200':
          description: Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string

  /v1/token:
    post:
      summary: Generate token via email/password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              example:
                email: "demo@example.com"
                password: "demo1234"
      responses:
        '200':
          description: Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Invalid credentials

  # --------------------
  # Service CRUD
  # --------------------
  /v1/services:
    get:
      summary: Get all services
      tags:
        - Services
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
    post:
      summary: Create a new service
      tags:
        - Services
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Web Design"
                description:
                  type: string
                  example: "Professional web design services"
      responses:
        '201':
          description: Service created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

  /v1/services/{id}:
    get:
      summary: Get a service by ID
      tags:
        - Services
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Service details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Service not found
    put:
      summary: Update a service
      tags:
        - Services
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Service Name"
                description:
                  type: string
                  example: "Updated description of the service"
      responses:
        '200':
          description: Service updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Service not found
    delete:
      summary: Delete a service
      tags:
        - Services
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Service deleted
        '404':
          description: Service not found

  # --------------------
  # Booking CRUD
  # --------------------
  /v1/bookings:
    get:
      summary: Get all bookings
      tags:
        - Bookings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
    post:
      summary: Create a new booking
      tags:
        - Bookings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - service_id
                - start_time
                - end_time
                - status
              properties:
                service_id:
                  type: integer
                  example: 2
                start_time:
                  type: string
                  format: date-time
                  example: "2025-10-25T10:00:00Z"
                end_time:
                  type: string
                  format: date-time
                  example: "2025-10-25T11:00:00Z"
                status:
                  type: string
                  enum: [pending, confirmed, completed, cancelled]
                  example: pending
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
  /v1/bookings/{id}:
    get:
      summary: Get a booking by ID
      tags:
        - Bookings
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
    put:
      summary: Update a booking (service_id and user_id cannot be updated)
      tags:
        - Bookings
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                start_time:
                  type: string
                  format: date-time
                  example: "2025-10-25T12:00:00Z"
                end_time:
                  type: string
                  format: date-time
                  example: "2025-10-25T13:00:00Z"
                status:
                  type: string
                  enum: [pending, confirmed, completed, cancelled]
                  example: confirmed
      responses:
        '200':
          description: Updated booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
    delete:
      summary: Delete a booking
      tags:
        - Bookings
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Booking deleted
        '404':
          description: Booking not found
