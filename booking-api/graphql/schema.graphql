"A datetime string with format `Y-m-d H:i:s`, e.g. `2025-10-26 14:30:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# -------------------------------------------------------------
# TYPES
# -------------------------------------------------------------

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type Service {
    id: ID!
    name: String!
    description: String
    created_at: DateTime!
    updated_at: DateTime!
    bookings: [Booking!]! @hasMany
}

type Booking {
    id: ID!
    user: User! @belongsTo
    service: Service! @belongsTo
    start_time: DateTime!
    end_time: DateTime!
    status: String!
}

type AuthPayload {
    user: User!
    token: String!
}

# -------------------------------------------------------------
# QUERIES
# -------------------------------------------------------------

type Query {
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"]),
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    users(name: String @where(operator: "like")): [User!]! @paginate(model: "App\\Models\\User", defaultCount: 10)

    services(name: String @where(operator: "like")): [Service!]! @paginate(model: "App\\Models\\Service", defaultCount: 10)

    service(id: ID! @eq): Service @find

    bookings(status: String @where(operator: "=")): [Booking!]! @paginate(model: "App\\Models\\Booking", defaultCount: 10)

    booking(id: ID! @eq): Booking @find
}

# -------------------------------------------------------------
# MUTATIONS
# -------------------------------------------------------------

type Mutation {
    token(email: String!, password: String!): AuthPayload

    createService(
      name: String! @rules(apply: ["required", "string", "max:255"]),
      description: String
    ): Service @create(model: "App\\Models\\Service")

    updateService(
      id: ID! @eq,
      name: String,
      description: String
    ): Service @update(model: "App\\Models\\Service")

    deleteService(id: ID! @eq): Service @delete(model: "App\\Models\\Service")

    # ---------------------
    # Booking CRUD
    # ---------------------
    "Create a new booking (must pass authenticated user_id)."
    createBooking(
      user_id: ID! @rules(apply: ["required", "exists:users,id"]),
      service_id: ID! @rules(apply: ["required", "exists:services,id"]),
      start_time: DateTime! @rules(apply: ["required"]),
      end_time: DateTime! @rules(apply: ["required", "after:start_time"]),
      status: String @rules(apply: ["in:pending,confirmed,completed,cancelled"])
    ): Booking @create(model: "App\\Models\\Booking")

    updateBooking(
      id: ID! @eq,
      start_time: DateTime,
      end_time: DateTime,
      status: String @rules(apply: ["in:pending,confirmed,completed,cancelled"])
    ): Booking @update(model: "App\\Models\\Booking")

    deleteBooking(id: ID! @eq): Booking @delete(model: "App\\Models\\Booking")
}
