type Query {
  "Get a single product by ID."
  product(id: ID!): Product

  "Get a list of products with pagination."
  products(
    "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    name: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): ProductPaginatorPaginator!
}

type Mutation {
  createProduct(name: String!, description: String, price: Float!, image: String, stock: Int!): Product
  updateProduct(id: ID!, name: String, description: String, price: Float, image: String, stock: Int): Product
  deleteProduct(id: ID!): Product
}

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime

"Account of a person who uses this application."
type User {
  "Unique primary key."
  id: ID!

  "Non-unique name."
  name: String!

  "Unique email address."
  email: String!

  "When the email was verified."
  email_verified_at: DateTime

  "When the account was created."
  created_at: DateTime!

  "When the account was last updated."
  updated_at: DateTime!
}

type Product {
  id: ID!
  name: String!
  description: String
  price: Float!
  image: String
  stock: Int!
  created_at: String
  updated_at: String
}

type ProductPaginator {
  data: [Product!]!
  paginatorInfo: PaginatorInfo!
}

"Information about pagination using a fully featured paginator."
type PaginatorInfo {
  "Number of items in the current page."
  count: Int!

  "Index of the current page."
  currentPage: Int!

  "Index of the first item in the current page."
  firstItem: Int

  "Are there more pages after this one?"
  hasMorePages: Boolean!

  "Index of the last item in the current page."
  lastItem: Int

  "Index of the last available page."
  lastPage: Int!

  "Number of items per page."
  perPage: Int!

  "Number of total available items."
  total: Int!
}

"A paginated list of ProductPaginator items."
type ProductPaginatorPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of ProductPaginator items."
  data: [ProductPaginator!]!
}

"Directions for ordering a list of records."
enum SortOrder {
  "Sort records in ascending order."
  ASC

  "Sort records in descending order."
  DESC
}

"Aggregate functions when ordering by a relation without specifying a column."
enum OrderByRelationAggregateFunction {
  "Amount of items."
  COUNT
}

"Aggregate functions when ordering by a relation that may specify a column."
enum OrderByRelationWithColumnAggregateFunction {
  "Average."
  AVG

  "Minimum."
  MIN

  "Maximum."
  MAX

  "Sum."
  SUM

  "Amount of items."
  COUNT
}

"Allows ordering a list of records."
input OrderByClause {
  "The column that is used for ordering."
  column: String!

  "The direction that is used for ordering."
  order: SortOrder!
}

"Specify if you want to include or exclude trashed results from a query."
enum Trashed {
  "Only return trashed results."
  ONLY

  "Return both trashed and non-trashed results."
  WITH

  "Only return non-trashed results."
  WITHOUT
}

